// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  username      String
  profilePic    String?
  aboutMe       String?       @default("Welcome to my profile!")
  updatedAt     DateTime      @updatedAt
  createdAt     DateTime      @default(now())
  role          Role          @default(USER)
  accountStatus AccountStatus @default(ACTIVE)

  // Relations
  deckLikes     DeckLike[]
  importedDecks UserImportedDeck[]
  ownedDecks    Deck[]             @relation("DeckOwner")
  flashcards    Flashcard[]

  // Back-relations for DeckReports
  reportedDecks    DeckReports[] @relation("DeckReports_Reporter")
  ownedDeckReports DeckReports[] @relation("DeckReports_Owner")

  @@map("users")
}

model Deck {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  userId         Int
  coverImage     String?
  isPublic       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  deckCategoryId Int?

  // Relations
  owner       User               @relation("DeckOwner", fields: [userId], references: [id])
  category    DeckCategory?       @relation(fields: [deckCategoryId], references: [id])
  likes       DeckLike[]
  importedBy  UserImportedDeck[]
  flashcards  DeckFlashcard[]
  deckReports DeckReports[]

  // Self-relation: copied deck
  copiedFromId Int?
  copiedFrom   Deck?  @relation("CopiedDeck", fields: [copiedFromId], references: [id])
  copies       Deck[] @relation("CopiedDeck")

  @@map("decks")
}

model DeckFlashcard {
  deckId      Int
  flashcardId Int

  deck      Deck      @relation(fields: [deckId], references: [id])
  flashcard Flashcard @relation(fields: [flashcardId], references: [id])

  @@id([deckId, flashcardId])
  @@map("deck_flashcards")
}

model DeckLike {
  userId Int
  deckId Int

  // Relations
  user User @relation(fields: [userId], references: [id])
  deck Deck @relation(fields: [deckId], references: [id])

  @@id([userId, deckId])
  @@map("deck_likes")
}

model UserImportedDeck {
  userId    Int
  deckId    Int
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  deck Deck @relation(fields: [deckId], references: [id])

  @@id([userId, deckId])
  @@map("user_imported_decks")
}

model Flashcard {
  id          Int      @id @default(autoincrement())
  question    String
  questionPic String?
  answer      String
  answerPic   String?
  detail      String?
  userId      Int
  deckId      Int?
  createdAt   DateTime @default(now())

  // Relations
  tags  FlashcardTag[]
  decks DeckFlashcard[]
  User  User            @relation(fields: [userId], references: [id])

  @@map("flashcards")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  flashcards FlashcardTag[]

  @@map("tags")
}

model FlashcardTag {
  flashcardId Int
  tagId       Int

  // Relations
  flashcard Flashcard @relation(fields: [flashcardId], references: [id])
  tag       Tag       @relation(fields: [tagId], references: [id])

  @@id([flashcardId, tagId])
  @@map("flashcard_tags")
}

model DeckCategory {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  decks Deck[]

  @@map("deck_categories")
}

model DeckReports {
  id           Int      @id @default(autoincrement())
  deckId       Int
  deckOwnerId  Int
  reporterId   Int
  reportReason String
  reportDetail String
  reportedAt   DateTime @default(now())
  reportStatus ReportStatus @default(OPEN)

  // Relations
  deck      Deck @relation(fields: [deckId], references: [id])
  deckOwner User @relation("DeckReports_Owner", fields: [deckOwnerId], references: [id])
  reporter  User @relation("DeckReports_Reporter", fields: [reporterId], references: [id])

  @@map("reports")
}

// Enums
enum Role {
  ADMIN
  USER
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum ReportStatus {
  OPEN
  RESOLVED
  REJECTED
}